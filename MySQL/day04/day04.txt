day03回顾
1.SQL查询
  1.group by
    1.select后字段名没有在group by之后出现，则必须对
    该字段进行聚合处理（聚合函数）
    #记：先分组，再聚合
    2.having
      1.过滤由gruop by语句返回的记录集
      2.where只能操作表中字段，having过滤由聚合函数生成
      的显示列
    3.distinct
      1.distinct 和 from 之间所有的字段全部相同才会去重
      2.select count(distinct name) from sanguo;
2.索引(BTREE)
  1.优点：加快数据检索速度
  2.缺点
    1.占用物理存储空间
    2.需要动态维护，占用系统资源
  3.分类
    1.普通索引(MUL),唯一索引(UNI,字段值不能重复，可为NULL)
      1.创建
        index(字段名)，index(字段名)
	unique(字段名),unique(字段名)
	create [unique] index 索引名 on 表名(字段名);
      2.查看
        desc 表名;
	show index from 表名\G;
	 Non_Unique:1:index
	 Non_Unique:0:unique
      3.删除
        drop index 索引名 on 表名；（只能一个一个删除）
  
    2.主键&&自增长(pri,不能重复,不能为NULL)
      1.创建
        id int primary key auto_increment,
	alter table 表名 add primray key(字段名);
      2.删除
        1.alter table 表名 modify id int;
	2.alter table 表名 drop primary key;
      3.指定起始值
        1.create table...() auto_increment=100;
	2.alter table 表名 auto_increment=1000;
      show variable like "secure_file_priv";
    3.数据导入语句
      load data infile "文件名"
      into table 表名
      fields terminated by "分隔符"
      lines terminated by "\n";

      查看修改文件权限
       ls -l 文件名
       chmod 644 文件名
     4.数据导出
       1.查看搜索路径
         show variables like "%secure%";
       2.执行导出语句
         select ...from 表名
	 into outfile "文件名"
	 fields terminated by "分隔符"
	 lines terminated by "\n";


day04笔记
1.外键（foreign key）
  1.定义：让当前表字段的值在另一个表的范围内选择
  2.语法
   foreign key(参考字段名)
   references 主表（被参考字段名）
   on delete 级联动作
   on update 级联动作
  3.使用规则
    1.主表，从表字段数据类型要一致
    2.主表被参考字段:主键
  4.示例
    表1，缴费信息表(财务)
      id  姓名    班级   缴费金额
      1   唐伯虎  AID06   300
      2   点秋香  AID06   260
      3   祝枝山  AID06   250
    表2.学生信息表(班主任)
      id  姓名  缴费金额
      1  唐伯虎  300
      2  点秋香  260
      3  祝枝山  250
       3 xxxxxxxxxxx

     1.创建表
      表1(主表)：
        create table jftab(
	id int primary key,
	name varchar(15)，
	class char(5),
	money int
	);

	insert into jf values
	(1,"唐伯虎","AID06",300),
	(2,"点秋香","AID06",260),
	(3,"祝枝山","AID06",250);
       
        

       表2（从表）
         create table bjtab(
	 stu_id int,
	 name varchar(15),
	 money int,
	 foreign key(stu_id) references jftab(id)
	 on delete cascade
	 on update cascade
	 );
        insert into bjtab values
	(1,"唐伯虎",300),
	(2,"点秋香",260);

  5.删除外键
    alter table 表名 drop foreign key 外键名;
    外键名：show create table 表名；
  6.级联动作  
     1.cascade
      数据级联删除，更新（参考字段）
     2.restrict(默认)
      从表有相关联记录，不允许主表操作
     3.set null
       主表删除，更新，从表相关联记录字段值为NULL

  7.已有表添加外键
    alter table 表名 add
    foreign key(参考字段名) references 主表（参考字段）
    on delete...
    on update...

  8.

2.表的复制
  1.语法
     create table 表名 select...from 表名 where 条件；

     select ...from 表名 where 条件
     into outfile ...
  2.示例
    1.复制MOSHOU，sanguo表的记录全部记录和字段，sanguo2
      create table sanguo2
      select *from MOSHOU.sanguo;
    2.复制MOSHOU.sanguo表的前3条记录，sanguo3
      mysql> create table sanguo3 
      select *from MOSHOU.sanguo limit 3;

    3复制MOSHOU.sanguo表的id,name,country三个字段的前5条记录，
    sanguo4
       mysql> create table sanguo4
           -> select id,name,country from MOSHOU.sanguo limit 5;


  3.如何复制表结构
    create table 表名 select ... from 表名 where false;

    复制MOSHOU.sanguo的表结构 \c
     mysql> create table sanguo5
         -> select * from MOSHOU.sanguo where false;

     1.复制 jf 的表结构，jf2
      desc jf2;
      desc jf;

  4.注意
    复制表的时候不会把原表的 键（key）属性复制过来


       


3.嵌套查询（子查询）
  1.定义：把内层的查询结果作为外层的查询条件
  2.语法格式
    select ... from 表名 where 条件(select ...);
  3.示例
    1.把攻击值小于平均攻击值的英雄名字和攻击值显示出来
      1.先计算平均值
        select avg(gongji) from MOSHOU.sanguo;
      2.找到低于<平均值的
        select name,gongji from MOSHOU.sanguo
	where gongji<平均值;

        子查询
        select name,gongji from MOSHOU.sanguo
	where gongji<(select avg(gongji) from MOSHOU.sanguo);

    2.找出每个国家攻击力最高的英雄的名字和攻击值
      select ....
      子查询（select ...分组聚合...）

      select name,gongji from sanguo
      where gongji in(select max(gongji) from sanguo group by country);

      select max(gongji) from sanguo group by country;
     ##无bug
      select name,gongji from sanguo
      where 
      (country,gongji) in
      (select country,max(gongji) from sanguo group 
      by country);


      蜀国：100
      魏国：200
      吴国：300

      吴国：三个英雄  300 200 100
MySQL-Files /Day04/LianJieChan.txt


4.多表查询
  1.两种方式
   1.select 字段名列表 from 表名列表;(笛卡儿积)
    t1: name ->"A1" "A2" "A3"
    t2: name -> "B1" "B2" 
    select * from t1,t2;

       +------+-------+
       | name | name2 |
       +------+-------+
       | A1   | B1    |
       | A1   | B2    |
       | A2   | B1    |
       | A2   | B2    |
       | A3   | B1    |
       | A3   | B2    |
       +------+-------+

   2....where 条件;
  2.练习
    1.显示省和市的详细信息
      河北省  石家庄市
      河北省  廊坊市
      湖北省  武汉市
      mysql> select sheng.s_name,city.c_name from sheng,city
          -> where
          -> sheng.s_id=city.cfather_id;
	+-----------+--------------+
	| s_name    | c_name       |
	+-----------+--------------+
	| 河北省    | 石家庄市     |
	| 河北省    | 沧州市       |
	| 河北省    | 廊坊市       |
	| 陕西省    | 西安市       |
	| 四川省    | 成都市       |
	| 四川省    | 重庆市       |
	| 广东省    | 广州市       |
	| 山东省    | 济南市       |
	| 湖北省    | 武汉市       |
	| 河南省    | 郑州市       |
	+-----------+--------------+


    2.显示省市县详细信息\c

	mysql> select sheng.s_name as sheng,city.c_name as city,xian.x_name as xian from sheng,city,xian
	    -> where
            -> sheng.s_id=city.cfather_id and city.c_id=xian.xfather_id;
	+-----------+--------------+-----------+
	| sheng     | city         | xian      |
	+-----------+--------------+-----------+
	| 河北省    | 石家庄市     | 正定县    |
	| 湖北省    | 武汉市       | 武昌区    |
	+-----------+--------------+-----------+

5.连接查询

  1.内连接
    1.语法格式
      select 字段名 from 
      表1 inner join 表2 on 条件
      inner join 表3 on 条件;
    2.显示省市的详细信息
      select sheng.s_name,city.c_name from 
      sheng inner join city on sheng.s_id=city.cfather_id;


    3.显示省市县详细信息
	mysql> select sheng.s_name,city.c_name,xian.x_name from
	    -> sheng inner join city
	    -> on sheng.s_id=city.cfather_id
            -> inner join xian
            -> on city.c_id=xian.xfather_id;
		+-----------+--------------+-----------+
		| s_name    | c_name       | x_name    |
		+-----------+--------------+-----------+
		| 河北省    | 石家庄市     | 正定县    |
		| 湖北省    | 武汉市       | 武昌区    |
		+-----------+--------------+-----------+


  2.外连接
    1.左连接
      1.以 左表 为主显示查询结果
      2.select 字段名 from
        表1 left join 表2 on 条件
	left join 表3 on 条件；

      3.显示省市详细信息
	 mysql> select sheng.s_name as sheng,city.c_name as city
	     -> from sheng left join city
             -> on sheng.s_id=city.cfather_id;
		+-----------+--------------+
		| sheng     | city         |
		+-----------+--------------+
		| 河北省    | 石家庄市     |
		| 河北省    | 沧州市       |
		| 河北省    | 廊坊市       |
		| 陕西省    | 西安市       |
		| 四川省    | 成都市       |
		| 四川省    | 重庆市       |
		| 广东省    | 广州市       |
		| 山东省    | 济南市       |
		| 湖北省    | 武汉市       |
		| 河南省    | 郑州市       |
		| 海南省    | NULL         |
		| 云南省    | NULL         |
		| 山西省    | NULL         |
		+-----------+--------------+


    2.右连接
      用法同左连接，以右表为主显示查询结果

6.数据备份（mysqldump,在Linux终端中操作）
   1.命令格式
     mysqldump -u用户名 -p 源库名 > 
     ~/***.sql

      mysqldump -uroot -p db4 > db4.sql

   2.源库名的表示方式
   --all-databases 备份所有库
   库名            备份单个库
   -B 库1 库2 库3  备份多个库
   库名 表1 表2 表3  备份指定库的多张表
   3.示例
     1.备份所有库，放到mydata 目录下:all.sql
       mysqldump -uroot -p --all-databases>all.sql


     2.备份 db4库中的 sheng city xian 三张表，scx.sql
       mysqldump -uroot -p db4 sheng city xian>scx.sql
     3.备份MOSHOU和db4库，md.sql
       mysqldump -uroot -p -B MOSHOU db4 >md.sql
     4.备份db4库，db4.sql
       mysqldump -uroot -p db4 >db4.sql
   完全备份

   增量备份

7.数据恢复
  1.命令格式（Linux终端）
    mysql -uroot -p 目标库名 < ***.sql
    mysql -uroot -p db4 < db4.sql


  2.从所有库备份中恢复某一个库(--one-database)
    mysql -uroot -p --one-database 目标库名 <all.sql

    mysql -uroot -p --one-database db4<all.sql
  3.示例
    1.在db4.sheng新增一条记录
     mysql> insert into sheng values(11,200003,"日本省");

    2.在db4中新建一张表 t888，里面插入1条记录

    3.从db4.sql中恢复db4库
  4.注意
   1.恢复库时如果恢复到原库会将表中数据覆盖，新增表不会删除

   2.数据恢复时如果恢复的库不存在，则必须先创建空库

8.MySQL的用户账户管理
   1.开启MySQL远程连接
     1.sudo -i
     2.cd /etc/mysql/mysql.conf.d/
     3.subl mysqld.cnf
       #bind-address=127.0.0.1 ctrl+s保存
     4.重启mysql
    /etc/init.d/mysql restart

   2.添加授权用户
     1.用root用户登陆mysql
       mysql -uroot -p123456
     2.授权
       grant 权限列表 on 库.表 to "用户名"@"%"
       identified by "密码" with grant option;

	权限列表：all privileges  select  insert
	库.表： *.* 所有库的所有表

     3.示例
       1.添加授权用户tiger,密码123.对所有库的所有表有
       所有权


         mysql> grant all privilegs on *.* to "tiger"@"%"
             -> identified by "123" with grant option;

	2.添加用户rabbit,对db4库所有权限
	mysql>grant all privileges on db4.* to "rabbit"@"%" identified by "123" with grant option;

	   mysql> use mysql

           mysql> select user,host from user;
		+------------------+-----------+
		| user             | host      |
		+------------------+-----------+
		| rabbit           | %         |
		| tiger            | %         |
		| debian-sys-maint | localhost |
		| mysql.session    | localhost |
		| mysql.sys        | localhost |
		| root             | localhost |
		+------------------+-----------+



	   mysql -utiger -p123

作业：
  1.把 /etc/passwd 导入到数据库表userinfo里面
   tarena  :  x  :  1000  :  1000  :  tarena,,,
   用户名   密码    UID号    GID号    用户描述
   ：/home/tarena :   /bin/bash  
     家目录/主目录    登陆权限 
9.作业讲解
     1.
     mysql> create table userunfo(
         -> username varchar(25),
         -> password char(1),
         -> uid int,
         -> gid int,
         -> comment varchar(50),
         -> homedir varchar(50),
         -> shell varchar(50)
         -> );
     2.
     sudo cp /etc/passwd /var/lib/mysql-files/
     3.
	mysql> load data infile "/var/lib/mysql-files/passwd"
            -> into table userinfo
            -> fields terminated by ":"
            -> lines terminated by "\n";


     4.
	mysql> alter table userinfo add id int(3) zerofill primary
            -> key auto_increment first;
     5.
            select user_id,count(user_id) from comment
            group by user_id order by count(user_id) desc limit 10;


10.今日作业
综述：两张表，一张顾客信息表customers，一张订单表orders
1、创建一张顾客信息表customers，字段要求如下：
  c_id 类型为整型，设置为主键，并设置为自增长属性
  c_name 字符类型，变长，宽度为20
  c_age 微小整型，取值范围为0~255(无符号)
  c_sex 枚举类型，要求只能在('M','F')中选择一个值
  c_city 字符类型，变长，宽度为20
  c_salary 浮点类型，要求整数部分最大为10位，小数部分为2位

  在表中任意插入3条记录,c_name为"Zhangsan","Lisi","Wangwu", c_city尽量	写"Beijing","Shanghai" ......

    insert into customers values
    (1,"Zhangsan",25,"M","Beijing",8000),
    (2,"Lisi",30,"F","Shanghai",10000),
    (3,"Wangwu",27,"M","Shenzhen",3000);

2、创建一张订单表orders，字段要求如下：
  o_id 整型
  o_name 字符类型，变长，宽度为30
  o_price 浮点类型，整数最大为10位，小数部分为2位
  设置此表中的o_id字段为customers表中c_id字段的外键,更新删除同步

  在表中任意插入5条记录(注意外键限制)
  o_name分别为"iphone","ipad","iwatch","mate9","r11",其他信息自己定
    insert into orders values
    (1,"iphone",5288),
    (1,"ipad",3299),
    (3,"mate9",3688),
    (2,"iwatch",2222),
    (2,"r11",4400);

3、返回customers表中，工资大于4000元，或者年龄小于29岁，满足这样条件的前2条记录

4、把customers表中，年龄大于等于25岁，并且地址是北京或者上海，这样的人的工资上调15%
 	
5、把customers表中，城市为北京的顾客，按照工资降序排列，并且只返回结果中的第一条记录	

6、选择工资c_salary最少的顾客的信息
	
7、找到工资大于5000的顾客都买过哪些产品的记录明细
					
8、删除外键限制
			
9、删除customers主键限制
  1、删除自增长属性
  2、删除主键限制


